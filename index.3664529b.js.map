{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    #state;\n    #score;\n    #status;\n    #initialState;\n    constructor(initialState = null){\n        this.#initialState = initialState ? this.#deepCopy(initialState) : Array.from({\n            length: 4\n        }, ()=>Array(4).fill(0));\n        this.restart();\n    }\n    getState() {\n        return this.#deepCopy(this.#state);\n    }\n    getScore() {\n        return this.#score;\n    }\n    getStatus() {\n        return this.#status;\n    }\n    start() {\n        if (this.#status === \"idle\") {\n            this.#addRandomCell();\n            this.#addRandomCell();\n            this.#status = \"playing\";\n        }\n    }\n    restart() {\n        this.#state = this.#deepCopy(this.#initialState);\n        this.#score = 0;\n        this.#status = \"idle\";\n    }\n    moveLeft() {\n        this.#makeMove(\"left\");\n    }\n    moveRight() {\n        this.#makeMove(\"right\");\n    }\n    moveUp() {\n        this.#makeMove(\"up\");\n    }\n    moveDown() {\n        this.#makeMove(\"down\");\n    }\n    #makeMove(direction) {\n        if (this.#status !== \"playing\" && this.#status !== \"win\") return;\n        let moved = false;\n        if (direction === \"left\" || direction === \"right\") moved = this.#processRows(direction === \"left\");\n        else if (direction === \"up\" || direction === \"down\") {\n            this.#transpose();\n            moved = this.#processRows(direction === \"up\");\n            this.#transpose();\n        }\n        if (moved) {\n            this.#addRandomCell();\n            this.#updateStatus();\n        }\n    }\n    #processRows(isLeft) {\n        let moved = false;\n        for (const row of this.#state){\n            const processedRow = isLeft ? row : [\n                ...row\n            ].reverse();\n            const { newRow: newRow, hasMoved: hasMoved } = this.#compressRow(processedRow);\n            if (hasMoved) moved = true;\n            row.splice(0, 4, ...isLeft ? newRow : newRow.reverse());\n        }\n        return moved;\n    }\n    #compressRow(row) {\n        const nonZero = row.filter((n)=>n !== 0);\n        const newRow = Array(4).fill(0);\n        let moved = false;\n        let writeIndex = 0;\n        for(let i = 0; i < nonZero.length; i++)if (nonZero[i] === nonZero[i + 1]) {\n            newRow[writeIndex++] = nonZero[i] * 2;\n            this.#score += nonZero[i] * 2;\n            if (newRow[writeIndex - 1] === 2048) this.#status = \"win\";\n            i++;\n            moved = true;\n        } else {\n            newRow[writeIndex++] = nonZero[i];\n            if (newRow[writeIndex - 1] !== row[writeIndex - 1]) moved = true;\n        }\n        return {\n            newRow: newRow,\n            hasMoved: moved\n        };\n    }\n    #addRandomCell() {\n        const emptyCells = [];\n        this.#state.forEach((row, i)=>row.forEach((cell, j)=>{\n                if (cell === 0) emptyCells.push({\n                    i: i,\n                    j: j\n                });\n            }));\n        if (emptyCells.length > 0) {\n            const { i: i, j: j } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n            this.#state[i][j] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    #updateStatus() {\n        if (this.#status === \"win\") return;\n        if (!this.#canMakeMove()) this.#status = \"lose\";\n    }\n    #canMakeMove() {\n        return this.#state.some((row, i)=>row.some((cell, j)=>{\n                if (cell === 0) return true;\n                if (j < 3 && cell === row[j + 1]) return true;\n                if (i < 3 && cell === this.#state[i + 1][j]) return true;\n                return false;\n            }));\n    }\n    #transpose() {\n        this.#state = this.#state[0].map((_, colIndex)=>this.#state.map((row)=>row[colIndex]));\n    }\n    #deepCopy(state) {\n        return state.map((row)=>[\n                ...row\n            ]);\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nclass $09e991522ca7e64e$var$UIController {\n    constructor(gameInstance){\n        this.game = gameInstance;\n        this.scoreElement = document.querySelector(\".game-score\");\n        this.gameField = document.querySelector(\".game-field\");\n        this.fieldCells = document.querySelectorAll(\".field-cell\");\n        this.startButton = document.querySelector(\".button.start\");\n        this.restartButton = document.querySelector(\".button.restart\");\n        this.loseMessage = document.querySelector(\".message-lose\");\n        this.winMessage = document.querySelector(\".message-win\");\n        this.startMessage = document.querySelector(\".message-start\");\n        function bounceCells() {\n            this.fieldCells.forEach((cell)=>{\n                cell.classList.add(\"bounce\");\n            });\n            this.fieldCells.forEach((cell)=>{\n                cell.addEventListener(\"animationend\", ()=>{\n                    cell.classList.remove(\"bounce\");\n                }, {\n                    once: true\n                });\n            });\n        }\n        this.startButton.addEventListener(\"click\", this.startGame.bind(this));\n        this.startButton.addEventListener(\"click\", bounceCells.bind(this));\n        this.restartButton.addEventListener(\"click\", this.restartGame.bind(this));\n        document.addEventListener(\"keydown\", this.handleKeyDown.bind(this));\n        this.restartButton.addEventListener(\"click\", bounceCells.bind(this));\n        this.renderField();\n        this.updateScore();\n        this.showStartMessage();\n    }\n    renderField() {\n        const state = this.game.getState();\n        this.fieldCells.forEach((cell, index)=>{\n            const row = Math.floor(index / 4);\n            const col = index % 4;\n            const value = state[row][col];\n            cell.className = \"field-cell\";\n            if (value !== 0) {\n                cell.classList.add(`field-cell--${value}`);\n                cell.textContent = value;\n            } else cell.textContent = \"\";\n        });\n    }\n    updateScore() {\n        this.scoreElement.textContent = this.game.getScore();\n    }\n    resetMessages() {\n        this.loseMessage.classList.add(\"hidden\");\n        this.winMessage.classList.add(\"hidden\");\n        this.startMessage.classList.add(\"hidden\");\n    }\n    showStartMessage() {\n        this.startMessage.classList.remove(\"hidden\");\n    }\n    startGame() {\n        this.game.start();\n        this.renderField();\n        this.updateScore();\n        this.resetMessages();\n        this.restartButton.classList.remove(\"hidden\");\n        this.startButton.classList.add(\"hidden\");\n    }\n    restartGame() {\n        this.game.restart();\n        this.startGame();\n    }\n    handleKeyDown(e) {\n        if (this.game.getStatus() !== \"playing\" && this.game.getStatus() !== \"win\") return;\n        const moves = {\n            ArrowLeft: \"moveLeft\",\n            ArrowRight: \"moveRight\",\n            ArrowUp: \"moveUp\",\n            ArrowDown: \"moveDown\"\n        };\n        const move = moves[e.key];\n        if (move) {\n            this.game[move]();\n            this.renderField();\n            this.updateScore();\n            this.checkGameStatus();\n        }\n    }\n    checkGameStatus() {\n        if (this.game.getStatus() === \"win\") this.winMessage.classList.remove(\"hidden\");\n        else if (this.game.getStatus() === \"lose\") {\n            this.loseMessage.classList.remove(\"hidden\");\n            this.restartButton.classList.remove(\"hidden\");\n            this.startButton.classList.add(\"hidden\");\n        }\n    }\n}\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$uiController = new $09e991522ca7e64e$var$UIController($09e991522ca7e64e$var$game);\n\n\n//# sourceMappingURL=index.3664529b.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\n\nclass UIController {\n  constructor(gameInstance) {\n    this.game = gameInstance;\n\n    this.scoreElement = document.querySelector('.game-score');\n    this.gameField = document.querySelector('.game-field');\n    this.fieldCells = document.querySelectorAll('.field-cell');\n    this.startButton = document.querySelector('.button.start');\n    this.restartButton = document.querySelector('.button.restart');\n    this.loseMessage = document.querySelector('.message-lose');\n    this.winMessage = document.querySelector('.message-win');\n    this.startMessage = document.querySelector('.message-start');\n\n    function bounceCells() {\n      this.fieldCells.forEach((cell) => {\n        cell.classList.add('bounce');\n      });\n\n      this.fieldCells.forEach((cell) => {\n        cell.addEventListener(\n          'animationend',\n          () => {\n            cell.classList.remove('bounce');\n          },\n          { once: true },\n        );\n      });\n    }\n\n    this.startButton.addEventListener('click', this.startGame.bind(this));\n    this.startButton.addEventListener('click', bounceCells.bind(this));\n\n    this.restartButton.addEventListener('click', this.restartGame.bind(this));\n    document.addEventListener('keydown', this.handleKeyDown.bind(this));\n    this.restartButton.addEventListener('click', bounceCells.bind(this));\n\n    this.renderField();\n    this.updateScore();\n    this.showStartMessage();\n  }\n\n  renderField() {\n    const state = this.game.getState();\n\n    this.fieldCells.forEach((cell, index) => {\n      const row = Math.floor(index / 4);\n      const col = index % 4;\n      const value = state[row][col];\n\n      cell.className = 'field-cell';\n\n      if (value !== 0) {\n        cell.classList.add(`field-cell--${value}`);\n        cell.textContent = value;\n      } else {\n        cell.textContent = '';\n      }\n    });\n  }\n\n  updateScore() {\n    this.scoreElement.textContent = this.game.getScore();\n  }\n\n  resetMessages() {\n    this.loseMessage.classList.add('hidden');\n    this.winMessage.classList.add('hidden');\n    this.startMessage.classList.add('hidden');\n  }\n\n  showStartMessage() {\n    this.startMessage.classList.remove('hidden');\n  }\n\n  startGame() {\n    this.game.start();\n    this.renderField();\n    this.updateScore();\n    this.resetMessages();\n    this.restartButton.classList.remove('hidden');\n    this.startButton.classList.add('hidden');\n  }\n\n  restartGame() {\n    this.game.restart();\n    this.startGame();\n  }\n\n  handleKeyDown(e) {\n    if (\n      this.game.getStatus() !== 'playing' &&\n      this.game.getStatus() !== 'win'\n    ) {\n      return;\n    }\n\n    const moves = {\n      ArrowLeft: 'moveLeft',\n      ArrowRight: 'moveRight',\n      ArrowUp: 'moveUp',\n      ArrowDown: 'moveDown',\n    };\n\n    const move = moves[e.key];\n\n    if (move) {\n      this.game[move]();\n      this.renderField();\n      this.updateScore();\n      this.checkGameStatus();\n    }\n  }\n\n  checkGameStatus() {\n    if (this.game.getStatus() === 'win') {\n      this.winMessage.classList.remove('hidden');\n    } else if (this.game.getStatus() === 'lose') {\n      this.loseMessage.classList.remove('hidden');\n      this.restartButton.classList.remove('hidden');\n      this.startButton.classList.add('hidden');\n    }\n  }\n}\n\nconst game = new Game();\nconst uiController = new UIController(game);\n","'use strict';\n\nclass Game {\n  #state;\n  #score;\n  #status;\n  #initialState;\n\n  constructor(initialState = null) {\n    this.#initialState = initialState\n      ? this.#deepCopy(initialState)\n      : Array.from({ length: 4 }, () => Array(4).fill(0));\n    this.restart();\n  }\n\n  getState() {\n    return this.#deepCopy(this.#state);\n  }\n\n  getScore() {\n    return this.#score;\n  }\n\n  getStatus() {\n    return this.#status;\n  }\n\n  start() {\n    if (this.#status === 'idle') {\n      this.#addRandomCell();\n      this.#addRandomCell();\n      this.#status = 'playing';\n    }\n  }\n\n  restart() {\n    this.#state = this.#deepCopy(this.#initialState);\n    this.#score = 0;\n    this.#status = 'idle';\n  }\n\n  moveLeft() {\n    this.#makeMove('left');\n  }\n\n  moveRight() {\n    this.#makeMove('right');\n  }\n\n  moveUp() {\n    this.#makeMove('up');\n  }\n\n  moveDown() {\n    this.#makeMove('down');\n  }\n\n  #makeMove(direction) {\n    if (this.#status !== 'playing' && this.#status !== 'win') {\n      return;\n    }\n\n    let moved = false;\n\n    if (direction === 'left' || direction === 'right') {\n      moved = this.#processRows(direction === 'left');\n    } else if (direction === 'up' || direction === 'down') {\n      this.#transpose();\n      moved = this.#processRows(direction === 'up');\n      this.#transpose();\n    }\n\n    if (moved) {\n      this.#addRandomCell();\n      this.#updateStatus();\n    }\n  }\n\n  #processRows(isLeft) {\n    let moved = false;\n\n    for (const row of this.#state) {\n      const processedRow = isLeft ? row : [...row].reverse();\n      const { newRow, hasMoved } = this.#compressRow(processedRow);\n\n      if (hasMoved) {\n        moved = true;\n      }\n      row.splice(0, 4, ...(isLeft ? newRow : newRow.reverse()));\n    }\n\n    return moved;\n  }\n\n  #compressRow(row) {\n    const nonZero = row.filter((n) => n !== 0);\n    const newRow = Array(4).fill(0);\n    let moved = false;\n    let writeIndex = 0;\n\n    for (let i = 0; i < nonZero.length; i++) {\n      if (nonZero[i] === nonZero[i + 1]) {\n        newRow[writeIndex++] = nonZero[i] * 2;\n        this.#score += nonZero[i] * 2;\n\n        if (newRow[writeIndex - 1] === 2048) {\n          this.#status = 'win';\n        }\n        i++;\n        moved = true;\n      } else {\n        newRow[writeIndex++] = nonZero[i];\n\n        if (newRow[writeIndex - 1] !== row[writeIndex - 1]) {\n          moved = true;\n        }\n      }\n    }\n\n    return { newRow, hasMoved: moved };\n  }\n\n  #addRandomCell() {\n    const emptyCells = [];\n\n    this.#state.forEach((row, i) =>\n      row.forEach((cell, j) => {\n        if (cell === 0) {\n          emptyCells.push({ i, j });\n        }\n      }),\n    );\n\n    if (emptyCells.length > 0) {\n      const { i, j } =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.#state[i][j] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  #updateStatus() {\n    if (this.#status === 'win') {\n      return;\n    }\n\n    if (!this.#canMakeMove()) {\n      this.#status = 'lose';\n    }\n  }\n\n  #canMakeMove() {\n    return this.#state.some((row, i) =>\n      row.some((cell, j) => {\n        if (cell === 0) {\n          return true;\n        }\n\n        if (j < 3 && cell === row[j + 1]) {\n          return true;\n        }\n\n        if (i < 3 && cell === this.#state[i + 1][j]) {\n          return true;\n        }\n\n        return false;\n      }),\n    );\n  }\n\n  #transpose() {\n    this.#state = this.#state[0].map((_, colIndex) =>\n      this.#state.map((row) => row[colIndex]),);\n  }\n\n  #deepCopy(state) {\n    return state.map((row) => [...row]);\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$09e991522ca7e64e$var$game","constructor","initialState","Array","from","length","fill","restart","getState","getScore","getStatus","start","moveLeft","moveRight","moveUp","moveDown","direction","moved","isLeft","row","processedRow","reverse","newRow","hasMoved","splice","nonZero","filter","n","writeIndex","i","emptyCells","forEach","cell","j","push","Math","floor","random","some","map","_","colIndex","state","gameInstance","bounceCells","fieldCells","classList","add","addEventListener","remove","once","game","scoreElement","document","querySelector","gameField","querySelectorAll","startButton","restartButton","loseMessage","winMessage","startMessage","startGame","bind","restartGame","handleKeyDown","renderField","updateScore","showStartMessage","index","value","className","textContent","resetMessages","e","move","moves","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","key","checkGameStatus"],"version":3,"file":"index.3664529b.js.map"}